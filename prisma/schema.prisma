// Add to your existing User model
model User {
  id            String      @id @default(cuid())
  clerkId       String?     @unique // Make it optional at first, then mandatory later
  name          String?
  username      String?     @unique
  email         String?     @unique
  image         String?
  location      String?
  skillLevel    String?
  phone         String?
  bio           String?
  playingStyle  String?
  rating        Float?      @default(0)
  totalReviews  Int?        @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  photos        UserPhoto[]
  bookings      Booking[]
  ratings       UserRating[]

  @@map("users")
}

model UserPhoto {
  id        String   @id @default(cuid())
  imageUrl  String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_photos")
}

model UserRating {
  id          String   @id @default(cuid())
  rating      Int
  review      String?
  userId      String
  reviewerId  String   // ID of the user who gave the rating
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewer    User     @relation(fields: [reviewerId], references: [clerkId], onDelete: Cascade)

  @@map("user_ratings")
}

model Booking {
  id          String   @id @default(cuid())
  date        DateTime
  time        String
  duration    Int      // in minutes
  players     Int
  maxPlayers  Int
  cost        Float
  status      String   // CONFIRMED, WAITING, COMPLETED, CANCELLED
  skillLevel  String?
  userId      String
  venueId     String
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  venue       Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model Venue {
  id          String   @id @default(cuid())
  name        String
  location    String
  courts      Int
  surface     String?
  amenities   String[] // Stored as JSON
  createdAt   DateTime @default(now())

  // Relations
  bookings    Booking[]

  @@map("venues")
}